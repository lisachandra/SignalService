[{"title":"Connection","type":0,"sectionRef":"#","url":"api/Connection","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"api/Connection#functions","content":" "},{"title":"Disconnect​","type":1,"pageTitle":"Connection","url":"api/Connection#Disconnect","content":"&lt;/&gt; Connection:Disconnect() → () Disconnects/Destroys the connection for GC and sets the Connection.Connected property to false ---@type Connection -- This is for IntelliSense local Connection = Signal:Connect(function() end) Connection:Disconnect() print(Connection.Connected) -- false  "},{"title":"SignalService","type":0,"sectionRef":"#","url":"api/SignalService","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SignalService","url":"api/SignalService#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SignalService","url":"api/SignalService#new","content":"&lt;/&gt; SignalService.new() → Signal Creates a new signal ---@type Signal -- This is for IntelliSense local Signal = SignalService.new()   "},{"title":"isSignal​","type":1,"pageTitle":"SignalService","url":"api/SignalService#isSignal","content":"&lt;/&gt; SignalService.isSignal(signalToCheck: Signal) → boolean Returns true if the passed in signal is a signal, returns false if it's not local boolean = SignalService.isSignal(SignalService.new()) -- True  "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: any) → () Fires the signal causing all connected callbacks to fire Signal:Connect(function(arg1, boolean, integer) print(arg1, tostring(boolean), tostring(integer)) -- Outputs `Argument1 true 3` end) Signal:Fire(&quot;Argument1&quot;, true, 3) -- arguments can be anything you want   "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:Wait() → any Yields the thread and resumes with it's arguments when the signal is fired task.delay(2, function() Signal:Fire(&quot;it waited!&quot;) end) -- this will yield the thread for approximately 2 seconds local randomInteger = Signal:Wait() -- returns &quot;it waited!&quot;   "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"&lt;/&gt; Signal:Connect(callbackFunction: fun()) → Connection Connects a callback to the signal that will be fired when &lt;Signal&gt;:Fire() is called and Returns a connection that can be disconnected by calling &lt;Connection&gt;:Disconnect() ---@type Connection -- This is for IntelliSense local Connection = Signal:Connect(function(arg1, boolean, integer) print(arg1, tostring(boolean), tostring(integer)) -- Outputs `Argument1 true 3` end) Signal:Fire(&quot;Argument1&quot;, true, 3)   "},{"title":"Destroy​","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"&lt;/&gt; Signal:Destroy() → () Runs &lt;Signal&gt;:DisconnectAll() then destroys/cleans the signal for GC Signal:Destroy() local boolean = SignalService.isSignal(Signal) -- false   "},{"title":"Dispatch​","type":1,"pageTitle":"Signal","url":"api/Signal#Dispatch","content":"&lt;/&gt; Signal:Dispatch(action: table) → any Similar to &lt;Rodux.Store&gt;:dispatch() Signal:onDispatch({ NEW_DISPATCH = function(action) print(action.string) -- This is a dispatch running end }) Signal:Dispatch({ type = &quot;NEW_DISPATCH&quot;, string = &quot;This is a dispatch running&quot; })   "},{"title":"onDispatch​","type":1,"pageTitle":"Signal","url":"api/Signal#onDispatch","content":"&lt;/&gt; Signal:onDispatch(dispatchHandlers: table) → () Similar to Rodux.createReducer() Signal:onDispatch({ NEW_DISPATCH = function(action) print(action.string) -- This is a dispatch running end }) Signal:Dispatch({ type = &quot;NEW_DISPATCH&quot;, -- the type field is required for dispatching string = &quot;This is a dispatch running&quot; })   "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Runs &lt;Connection&gt;:Disconnect() on every connection that is in the signal local Connection1 = Signal:Connect(function() end) local Connection2 = Signal:Connect(function() end) Signal:DisconnectAll() print(Connection1.Connected, Connection2.Connected) -- false false  "},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/intro","content":"Installation The installation guide is found on the github releases page.","keywords":""},{"title":"Guides","type":0,"sectionRef":"#","url":"docs/Guides","content":"Guides Guides to help you better understand SignalService. API DocumentationEvents - Roblox Scripting Tutorials 2021Beginner's Roblox Scripting Tutorial #10 - Events (Beginner to Pro 2019) Garbage Collection and Memory Leaks in Roblox - What you should know","keywords":""}]